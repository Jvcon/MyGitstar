---
import CardView from "./views/CardView.astro";
import TableView from "./views/TableView.astro";
import CollectionList from "./shared/CollectionList.astro";
---

<div id="app-container" class="w-full h-full">
  <!-- 视图切换和工具栏 -->
  <div class="toolbar flex-shrink-0 mb-4 flex justify-between items-center">
    <div id="toolbar-left" class="flex items-center gap-x-2">
      <div id="datatable-buttons-container"></div>
    </div>
    <div id="toolbar-right" class="flex items-center gap-x-2">
       <button
        id="toggle-collection-panel-btn"
        class="toolbar-button collection-toggle-btn"
      >
        Collections
      </button>
      <div id="datatable-search-container"></div>
      <div id="view-switcher" class="flex gap-2 p-1 bg-gray-800 rounded-lg">
        <button data-view="table" class="view-btn"
          ><svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-5 h-5"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M3.375 6.375h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Zm0 6.25h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Zm0 6.25h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Z"
            ></path>
          </svg></button
        >
        <button data-view="card" class="view-btn"
          ><svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-5 h-5"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M3.75 6A2.25 2.25 0 0 1 6 3.75h2.25A2.25 2.25 0 0 1 10.5 6v2.25a2.25 2.25 0 0 1-2.25 2.25H6a2.25 2.25 0 0 1-2.25-2.25V6ZM3.75 15.75A2.25 2.25 0 0 1 6 13.5h2.25a2.25 2.25 0 0 1 2.25 2.25V18A2.25 2.25 0 0 1 8.25 20.25H6A2.25 2.25 0 0 1 3.75 18v-2.25ZM13.5 6a2.25 2.25 0 0 1 2.25-2.25H18A2.25 2.25 0 0 1 20.25 6v2.25A2.25 2.25 0 0 1 18 10.5h-2.25a2.25 2.25 0 0 1-2.25-2.25V6ZM13.5 15.75a2.25 2.25 0 0 1 2.25-2.25H18a2.25 2.25 0 0 1 2.25 2.25V18A2.25 2.25 0 0 1 18 20.25h-2.25A2.25 2.25 0 0 1 13.5 18v-2.25Z"
            ></path>
          </svg></button
        >
      </div>
    </div>
  </div>

  <!-- 视图渲染区域 -->
  <div id="main-layout-grid" class="manager-grid flex-grow min-h-0">
    <div id="card-view-wrapper" class="hidden">
      <CardView />
    </div>
    <div id="table-view-wrapper">
      <TableView />
    </div>
  </div>

  <div id="sidebar-area" class="collection-list-section">
    <!-- <CollectionList client:only="preact" /> -->
  </div>
</div>

<script>
  import {
    activeView,
    initializeData,
    isSidebarVisible,
    isDraggable,
    dataTableStore,
  } from "./store.js";

  // 1. 初始化应用数据
  initializeData();

  // 2. 视图切换逻辑
  const switcher = document.getElementById("view-switcher");
  const cardWrapper = document.getElementById("card-view-wrapper");
  const tableWrapper = document.getElementById("table-view-wrapper");
  const buttons = switcher.querySelectorAll(".view-btn");
  const collectionsBtn = document.getElementById("toggle-collection-panel-btn");
  const appContainer = document.getElementById("app-container");
  function handleViewChange(view) {
    if (view === "card") {
      cardWrapper.classList.remove("hidden");
      tableWrapper.classList.add("hidden");
      isSidebarVisible.set(true);
    } else {
      cardWrapper.classList.add("hidden");
      tableWrapper.classList.remove("hidden");
      isSidebarVisible.set(false);

      setTimeout(() => {
        const dtInstance = dataTableStore.get();
        if (dtInstance) {
          dtInstance.columns.adjust().draw(false);
        }
      }, 10);
    }
    buttons.forEach((btn) => {
      const htmlBtn = btn as HTMLElement;
      htmlBtn.classList.toggle("active", htmlBtn.dataset.view === view);
    });
    // collectionsBtn.classList.toggle("hidden", view !== "table");
    appContainer.classList.toggle("view-mode-card", view === "card");
  }

  // 3. 订阅 store 变化来更新 UI
  const unsubscribe = activeView.subscribe(handleViewChange);
  // === 新的侧边栏控制逻辑 ===
  const mainLayoutGrid = document.getElementById("main-layout-grid");

  // 1. 监听侧边栏可见性状态，并更新 UI
  isSidebarVisible.subscribe((visible) => {
    mainLayoutGrid.classList.toggle("sidebar-collapsed", !visible);

    // 根据您的需求，当视图为 Table 时，默认隐藏侧边栏
    if (activeView.get() === "table" && visible) {
      // 如果是表格视图且侧边栏应“可见”，我们强制将其设为“不可见”
      // 这段逻辑可以在页面加载时或视图切换时执行
    }
  });

  switcher.addEventListener("click", (e) => {
    const eventTarget = e.target as HTMLElement;
    const target = eventTarget.closest(".view-btn") as HTMLElement | null;
    console.log("Clicked view button:", target.dataset.view);
    if (target) {
      activeView.set(target.dataset.view);
    }
  });

  collectionsBtn.addEventListener("click", () => {
    isSidebarVisible.set(!isSidebarVisible.get());
  });

  // 4. 初始化时设置正确的视图
  handleViewChange(activeView.get());

  document.addEventListener(
    "astro:before-swap",
    () => {
      unsubscribe();
    },
    { once: true }
  );
</script>
